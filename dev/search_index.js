var documenterSearchIndex = {"docs":
[{"location":"api.html#Basic-Workflow-Walkthrough","page":"Reference","title":"Basic Workflow Walkthrough","text":"","category":"section"},{"location":"api.html","page":"Reference","title":"Reference","text":"RadarQC is a package that utilizes a methodology developed by Dr. Alex DesRosiers and Dr. Michael Bell to remove non-meteorological gates from Doppler radar scans by leveraging machine learning techniques. In its current form, it contains functionality to derive a set of features from input radar data, use these features to train a Random Forest classification model, and apply this model to the raw fields contained within the radar scans. It also has some model evaluation ability. The beginning of this guide will walk through a basic workflow to train a model starting from scratch. ","category":"page"},{"location":"api.html#API-/-Function-References","page":"Reference","title":"API / Function References","text":"","category":"section"},{"location":"api.html#Model-Configuration","page":"Reference","title":"Model Configuration","text":"","category":"section"},{"location":"api.html#Ronin.ModelConfig","page":"Reference","title":"Ronin.ModelConfig","text":"Stuct used to store configuration information for a given model\n\nRequired arguments\n\nnum_models:::Int64\n\nNumber of ML models in the model chain. Can be one or more. \n\nmodel_output_paths::Vector{String}\n\nVector containing paths to each model in the model chain. Should be same length as the number of models \n\nmet_probs::Vector{Tuple{Float64,Float64}}\n\nVector containing the decision range for a gate to be considered meteorological in each model in the chain. Example, if set to (.9, 1),      > 90% of trees in the random forest must assign a gate a label of meteorological for it to be considered meteorological.      The range is exclusive on both ends. That is, for a gate to be classified as non-meteorological, it must have     a probability LESS THAN the low threshold, and for a gate to be classified as meteorological it must have      a probability GREATER THAN the high threshold. For multi-pass models, gates between these thresholds (inclusive) will      be sent on to the next pass. Form is (lowthreshold, highthreshold)\n\nfeature_output_paths::Vector{String}\n\nVector containing paths representing the locations to output calculated features to for each model in the chain. \n\ninput_path::String\n\nDirectory containing input radar data \n\ninput_config::String \n\nPath to file containing feature variables to calculate \n\nfile_preprocessed::Vector{Bool}\n\nFor each model in the chain, contains a boolean value signifying if the correspondant feature output path has already been processed. If true,  will open the file at this path instead of re-calculating input features. \n\nOptional arguments\n\nverbose::Bool = true \n\nWhether to print out timing information, etc. \n\nREMOVE_LOW_NCP::Bool = true\n\nWhether to automatically remove gates that do not meet a basic NCP threshold \n\nREMOVE_HIGH_PGG::Bool = true\n\nWhether to automatically remove gates that do not meet a basic PGG threshold \n\nHAS_INTERACTIVE_QC::Bool = false \n\nWhether the radar data has already had interactive QC applied to it \n\nQC_var::String = \"VG\"\n\nIf radar data has interactive QC already applied, the name of a variable that the QC has been applied to \n\nremove_var::String = \"VV\" \n\nName of a raw variable in the radar data that can be used to determine the location of missing gates \n\nreplace_missing::Bool = false \n\nFor spatial feature (AVG, STD, etc.) calculation, whether or not to replace MISSING gates in the mask area with FILL_VAL \n\nwrite_out::Bool = true \n\nWhether or not to write the calculated input features to disk, paths specified in featureoutputpaths\n\nQC_mask::Bool = false \n\nFor the first model in the chain, whether or not to mask gates considered for feature calculation using a mask specified by mask_name More details elsewhere in the documentation. \n\nmask_name::String = \"\"\n\nSee above \n\nVARS_TO_QC::Vector{String} = [\"VV\", \"ZZ\"]\n\nList of variables to apply QC to to get mask for next model in chain \n\nQC_SUFFIX::String\n\nPostfix to apply to variable name once QC has been applied. \n\nclass_weights::String = \"\"\n\nClass weighting scheme to apply in the training of RF model. Currently only \"balanced\" is implemented. \n\nn_trees::Int = 21\n\nNumber of trees in the random forest \n\nmax_depth::Int = 14\n\nMaximum depth of any one tree in the random forest \n\noverwrite_output::Bool = false\n\nIf true, will remove/overwrite existing files when internal functionality attempts to write new data to them \n\n\n\n\n\n","category":"type"},{"location":"api.html#Calculating-Model-Input-Features","page":"Reference","title":"Calculating Model Input Features","text":"","category":"section"},{"location":"api.html#Ronin.calculate_features-Tuple{String, String, String, Bool}","page":"Reference","title":"Ronin.calculate_features","text":"Function to process a set of cfradial files and produce input features for training/evaluating a model \n\nRequired arguments\n\ninput_loc::String\n\nPath to input cfradial or directory of input cfradials \n\nargument_file::String\n\nPath to configuration file containing which features to calculate \n\noutput_file::String\n\nPath to output calculated features to (generally ends in .h5)\n\nHAS_INTERACTIVE_QC::Bool\n\nSpecifies whether or not the file(s) have already undergone a interactive QC procedure.  If true, function will also output a Y array used to verify where interactive QC removed gates. This array is formed by considering where gates with non-missing data in raw scans (specified by remove_variable) are set to missing after QC is performed. \n\nOptional keyword arguments\n\nverbose::Bool=false\n\nIf true, will print out timing information as each file is processed \n\nREMOVE_LOW_NCP::Bool=false\n\nIf true, will ignore gates with Normalized Coherent Power/Signal Quality Index below a threshold specified in RQCFeatures.jl\n\nREMOVE_HIGH_PGG::Bool=false\n\nIf true, will ignore gates with Probability of Ground Gate (PGG) values at or above a threshold specified in RQCFeatures.jl \n\nQC_variable::String=\"VG\"\n\nName of variable in input NetCDF files that has been quality-controlled. \n\nremove_variable::String=\"VV\"\n\nName of a raw variable in input NetCDF files. Used to determine where missing data exists in the input sweeps.  Data at these locations will be removed from the outputted features. \n\nreplace_missing::Bool=false\n\nWhether or not to replace MISSING values with FILL_VAL in spatial parameter calculations Default value: False \n\nwrite_out::Bool=true\n\nWhether or not to write features out to file \n\nreturn_idxer::Bool = false\n\nIf true, will return IDXER, where IDXER is a \n\nweight_matrixes::Vector{Matrix{Union{Missing, Float64}}} = [(undef, 0,0)]\n\nVector containing a weight matrix for every task in the argument file. For non-spatial parameters, the      weights are discarded, and so dummy/placeholder matrixes may be used. \n\n\n\n\n\n","category":"method"},{"location":"api.html#Ronin.calculate_features-Tuple{String, Vector{String}, Vector{Matrix{Union{Missing, Float64}}}, String, Bool}","page":"Reference","title":"Ronin.calculate_features","text":"Function to process a set of cfradial files and produce input features for training/evaluating a model.      Allows for user-specified tasks and weight matrices, otherwise the same as above.  \n\nRequired arguments\n\ninput_loc::String\n\nPath to input cfradial or directory of input cfradials \n\ntasks::Vector{String}\n\nVector containing the features to be calculated for each cfradial. Example [DBZ, ISO(DBZ)]\n\nweight_matrixes::Vector{Matrix{Union{Missing, Float64}}}\n\nFor each task, a weight matrix specifying how much each gate in a spatial calculation will be given.  Required to be the same size as tasks\n\noutput_file::String \n\nLocation to output the calculated feature data to. \n\nHAS_INTERACTIVE_QC::Bool\n\nSpecifies whether or not the file(s) have already undergone a interactive QC procedure.  If true, function will also output a Y array used to verify where interactive QC removed gates. This array is formed by considering where gates with non-missing data in raw scans (specified by remove_variable) are set to missing after QC is performed. \n\nOptional keyword arguments\n\nverbose::Bool = false \n\nIf true, will print out timing information as each file is processed \n\nREMOVE_LOW_NCP::Bool = false \n\nIf true, will ignore gates with Normalized Coherent Power/Signal Quality Index below a threshold specified in RQCFeatures.jl\n\nREMOVE_HIGH_PGG::Bool = false\n\nIf true, will ignore gates with Probability of Ground Gate (PGG) values at or above a threshold specified in RQCFeatures.jl \n\nQC_variable::String = \"VG\"\n\nName of variable in input NetCDF files that has been quality-controlled. \n\nremove_variable::String = \"VV\"\n\nName of a raw variable in input NetCDF files. Used to determine where missing data exists in the input sweeps. \nData at these locations will be removed from the outputted features. \n\n\nreplace_missing::Bool = false \n\nWhether or not to replace MISSING values with FILL_VAL in spatial parameter calculations\nDefault value: False \n\n\njulia write_out::Bool = true  ``` Whether or not to write out to file. \n\n\n\n\n\n","category":"method"},{"location":"api.html#Ronin.split_training_testing!","page":"Reference","title":"Ronin.split_training_testing!","text":"Function to split a given directory or set of directories into training and testing files using the configuration described in DesRosiers and Bell 2023. This function assumes that input directories only contain cfradial files  that follow standard naming conventions, and are thus implicitly chronologically ordered. The function operates  by first dividing file names into training and testing sets following an 80/20 training/testing split, and subsequently softlinking each file to the training and testing directories. Attempts to avoid temporal autocorrelation while maximizing  variance by dividing each case into several different training/testing sections. \n\nAn important note: Always use absolute paths, relative paths will cause issues with the simlinks \n\nRequired Arguments:\n\nDIR_PATHS::Vector{String}\n\nList of directories containing cfradials to be used for model training/testing. Useful if input data is split  into several different cases. \n\nTRAINING_PATH::String \n\nDirectory to softlink files designated for training into. \n\nTESTING_PATH::String \n\nDirectory to softlink files designated for testing into. \n\n\n\n\n\n","category":"function"},{"location":"api.html#Ronin.train_model-Tuple{String, String}","page":"Reference","title":"Ronin.train_model","text":"Function to train a random forest model using a precalculated set of input and output features (usually output from  calculate_features). Returns nothing. \n\nRequired arguments\n\ninput_h5::String\n\nLocation of input features/targets. Input features are expected to have the name \"X\", and targets the name \"Y\". This should be  taken care of automatically if they are outputs from calculate_features\n\nmodel_location::String \n\nPath to save the trained model out to. Typically should end in .jld2\n\nOptional keyword arguments\n\nverify::Bool = false \n\nWhether or not to output a separate .h5 file containing the trained models predictions on the training set  (Y_PREDICTED) as well as the targets for the training set (Y_ACTUAL) \n\nverify_out::String=\"model_verification.h5\"\n\nIf verify, the location to output this verification to. \n\ncol_subset=: \n\nSet of columns from input_h5 to train model on. Useful if one wishes to train a model while excluding some features from a training set. \n\nrow_subset=:\n\nSet of rows from input_h5 to train on.\n\nn_trees::Int = 21\n\nNumber of trees in the Random Forest ensemble \n\nmax_depth::Int = 14\n\nMaximum node depth in each tree in RF ensemble \n\nclass_weights::Vector{Float32} = Vector{Float32}([1.,2.])\n\nVector of class weights to apply to each observation. Should be 1 observation per sample in the input data files \n\n\n\n\n\n","category":"method"},{"location":"api.html#Ronin.remove_validation","page":"Reference","title":"Ronin.remove_validation","text":"Function used to remove a given subset of the rows from a feature set so that they may be used for model validation/tuning.\n\nCurrently configured to utilize the 90/10 split described in DesRosiers and Bell 2023.\n\nRequired arguments\n\ninput_dataset::String\n\nPath to h5 files containing model features \n\nOptional keyword arguments\n\ntraining_output::String = \"train_no_validation_set.h5\"\n\nPath to output training features with validation removed to \n\nvalidation_output::String = \"validation.h5\"\n\nPath to output validation features to\n\nremove_original::Bool = true \n\nWhether or not to remove the original file described by the input_dataset path. \n\n\n\n\n\n","category":"function"},{"location":"api.html#Ronin.get_feature_importance-Tuple{String, Vector{Float64}}","page":"Reference","title":"Ronin.get_feature_importance","text":"Uses L1 regression with a variety of λ penalty values to determine the most useful features for\n\ninput to the random forest model.  \n\n\n\nRequired Input\n\n\n\ninput_file_path::String \n\nPath to .h5 file containing model training features under [\"X\"] parameter, and model targets under [\"Y\"] parameter.   Also expects the h5 file to contain an attribute known as Parameters containing abbreviations for the feature types \n\nλs::Vector{Float64}\n\nVector of values used to vary the strength of the penalty term in the regularization.\n\nOptional Keyword Arguments\n\n\n\npred_threshold::Float64\n\nMinimum cofidence level for binary classifier when predicting\n\nReturns\n\nReturns a DataFrame with each row containing info about a regression for a specific λ, the values of the regression coefficients      for each input feature, and the Root Mean Square Error of the resultant regression. \n\n\n\n\n\n","category":"method"},{"location":"api.html#Applying-and-evaluating-a-trained-model-to-data","page":"Reference","title":"Applying and evaluating a trained model to data","text":"","category":"section"},{"location":"api.html#Ronin.QC_scan","page":"Reference","title":"Ronin.QC_scan","text":"Primary function to apply a trained RF model to certain raw fields of a cfradial scan. Values determined to be  non-meteorological by the RF model will be replaced with Missing\n\nRequired Arguments\n\nfile_path::String \n\nLocation of input cfradial or directory of cfradials one wishes to apply QC to \n\nconfig_file_path::String \n\nLocation of config file containing features to calculate as inputs to RF model \n\nmodel_path::String \n\nLocation of trained RF model (in jld2 file format) \n\nOptional Arguments\n\nVARIABLES_TO_QC::Vector{String} = [\"ZZ\", \"VV\"]\n\nList containing names of raw variables in the CFRadial to apply QC algorithm to. \n\nQC_suffix::String = \"_QC\"\n\nUsed for naming the QC-ed variables in the modified CFRadial file. Field name will be QCsuffix appended to the raw field.  Example: `DBZQC`\n\nindexer_var::String = \"VV\"\n\nVariable used to determine what gates are considered \"missing\" in the raw moments. QC will not  be applied to these gates, they will simply remain missing. \n\ndecision_threshold::Float64 = .5\n\nUsed to leverage probablistic nature of random forest methodology. When the model has a greater than decision_threshold level confidence that a gate is meteorological data, it will be assigned as such. Anything at or below this confidence threshold will be assigned non-meteorological. At least in the ELDORA case, aggressive thresholds (.8 and above) have been found to maintain \n\n92% of the meteorological data while removing >99% of non-meteorological gates. \n\noutput_mask::Bool = true\n\nWhether or not to output the QC preditions from the model output. A value of 0 means the model predicted the gate to be non-meteorological, 1 corresponds to predicted meteorological data, and -1 denotes data that did not meet minimum thresholds\n\nmask_name::String = \"QC_MASK\"\n\nWhat to name the output QC predictions. \n\nverbose::Bool = false \n````\nWhether to output timing and scan information\n\n\njulia output_probs::Bool = false\n\nWhether or not to output probabilities of meteorological gate from random forest \n\njulia prob_varname::String = \"\" ``` What to name the probability variable in the cfradial file \n\n\n\n\n\nQC_scan(config::ModelConfig, filepath::String, predictions::Vector{Bool}, init_idxer::Vector{Bool})\n\nInternal function to apply QC to a scan specified by `filepath` using the predictions/indexer specified \nby `predictions` and `init_idxer`. Generally used in the context of a multi-pass model.\n\n\n\n\n\nQC_scan(config::ModelConfig)\n\nApplies trained composite model to data within scan or set of scans. Will set gates the  model deems to be non-meteorological to MISSING, including gates that do not meet  initial basic quality control thresholds. Essentially just a wrapper around composite_prediction. \n\nReturns: None\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ronin.predict_with_model-Tuple{String, String}","page":"Reference","title":"Ronin.predict_with_model","text":"Simple function that opens a given h5 file with feature data and applies a specific model to it.  Returns a tuple of predictions, targets. Also contains the ability to write these predictions and solutions  out to a separate h5 file. \n\nRequired arguments\n\nmodel_path::String \n\nLocation of trained RF model (saved in jld2 file format) \n\ninput_h5::String \n\nLocation of h5 file containing input features. \n\nOptional Keyword Arguments\n\nwrite_out::Bool = false\n\nWhether or not to write the results out to a file \n\noutfile::String = Path to write results to if write_out == true \n\nResults will be written in the h5 format with the name \"Predicitions\" and \"Ground Truth\" \n\nprobability_threshold::Float32 = .5\n\nMinimum fraction of trees classifying a gate as meteorological for it to be assigned a label of meteorological\n\nrow_subset=:\n\nSelection of rows to predict upon \n\n\n\n\n\n","category":"method"},{"location":"api.html#Ronin.evaluate_model-Tuple{String, String, String}","page":"Reference","title":"Ronin.evaluate_model","text":"Function that takes in a given model, directory containing either cfradials or an already processed h5 file,  a path to the configuration file, and a mode type (\"C\" for cfradials \"H\" for h5) and returns a Julia DataFrame  containing a variety of metrics about the model's performance on the specified set, including precision and recall scores. \n\nRequired arguments\n\nmodel_path::String\n\nPath to input trained random forest model\n\ninput_file_dir::String\n\nPath to input h5 file or directory of cfradial files to be processed\n\nconfig_file_path \n\nPath to configuration file containing information about what features to calculate \n\nOptional Arguments\n\nmode::String = \"C\"\n\nWhether to process a directory of cfradial files (\"C\" mode) or simply utilize an already-processed h5 file (\"H\" mode) \n\nwrite_out::Bool = false\n\nIf in \"C\" mode, whether or not to write the resulting calculated features out to a file \n\noutput_file::String = \"_.h5\" \n\nLocation to write calculated output features to. \n\ncol_subset = : \n\nSubset of columns of X array to input to model. \n\nAlso contains all keyword arguments for calculate_features \n\nproba_seq::StepRangeLen = .1:.1:.9\n\nSequence of probabilities to iterate through when evaluating the model \n\n\n\n\n\n","category":"method"},{"location":"api.html#Ronin.error_characteristics-Tuple{String, String, String}","page":"Reference","title":"Ronin.error_characteristics","text":"error_characteristics(file_path::String, config_file_path::String, model_path::String;\nindexer_var::String=\"VV\", QC_variable::String=\"VG\", decision_threshold::Float64 = .5, write_out::Bool=false,\noutput_name::String=\"Model_Error_Characteristics.h5\")\n\nFunction to process a set of cfradial files that have already been interactively QC'ed and return information about where errors  occur in the files relative to model predictions. Requires a pre-trained model and configuration, as well as scans that  have already been interactively quality controlled. \n\n#Required Arguments \n\nfile_path::String\n\nPath to file or directory of cfradials to be processed\n\nconfig_file_path::String\n\nPath to configuration file containing parameters to calculate for the cfradials \n\nmodel_path::String\n\nPath to pre-trained random forest model \n\nOptional keyword arguments\n\nindexer_var::String=\"VV\" \n\nName of a raw variable in input NetCDF files. Used to determine where missing data exists in the input sweeps.  Data at these locations will be removed from the outputted features. \n\nQC_variable::String=\"VG\"\n\nName of variable in CFRadial files that has already been interactively QC'ed. Used as the verification data. \n\ndecision_threshold::Float64 = .5\n\nFraction of decision trees in the RF model that must agree for a given gate to be classified as meteorological.  For example, at .5, >=50% of the trees must predict that a gate is meteorological for it to be classified as such,  otherwise it is assigned as non-meteorological. \n\nwrite_out::Bool=false\n\nWhether or not to output the model evaluation data to an HDF5 file \n\noutput_name::String=\"Model_Error_Characteristics.h5\"\n\nName/Path of desired HDF5 output location \n\nReturns\n\nReturns a tuple of (X, Y, indexer, predictions, falsepositives, falsenegatives)  Where\n\nX::Matrix{Float64}\n\nEach row in X represents a different radar gate, while each column a different parameter as according to the order  that they are listed in the configfilepath \n\nY::Matrix{Int64} \n\nEach row in Y represents a radar gate, and its classification according to the interactive QC applied to it. \n\nindexer::Matrix{Int64}\n\nFor all gates in the input directory, contains 1 if the gate passed basic QC thresholds (Low NCP, etc.) and 0 if it did not.  Useful if one wishes to reconstruct 2D scan from flattened data \n\npredictions:Matrix{Int32}\n\nTrained machine learning model predictions for the classification of a gate - 1 if predicted to be      meteorological data, 0 otherwise. \n\nfalse_postivies::BitMatrix\n\nWhich gates were misclassified as meteorological data relative to interactive QC\n\nfalse_negatives::BitMatrix\n\nWhich gates were misclassified as non-meteorological data relative to interactive QC \n\n\n\n\n\n","category":"method"},{"location":"api.html#Ronin.characterize_misclassified_gates","page":"Reference","title":"Ronin.characterize_misclassified_gates","text":"characterize_misclassified_gates(config::ModelConfig; model_pretrained::Bool = true, features_precalculated::Bool = true) \n\nFunction used to apply composite model to a set of gates, returning information about gate classifications and their associated input features \n\nRequired inputs\n\n    config::ModelConfig \n\nModel configuration object containing setup information. \n\nOptional Inputs\n\nmodel_pretrained::Bool = true \n\nModel training in this function not currently implemented, setting to false with untrained models will result in errors. \n\nfeatures_precalculated::Bool = true \n\nWhether or not the input features for the model have already been written to disk. \n\nNot currently implemented. \n\n\n\nReturns\n\nVector of dataframes (one DataFrame for each model \"pass\"). DataFrames will only contain information about gates reciving their final classification  during that pass of the model. That is, if a gate exceeds the met_probs thresholds and is not passed on to the next pass, it will be represented in the  DataFrame corresponding to that present pass of the model. \n\n\n\n\n\n","category":"function"},{"location":"api.html#Predicting-using-a-composite-model","page":"Reference","title":"Predicting using a composite model","text":"","category":"section"},{"location":"api.html#Ronin.train_multi_model","page":"Reference","title":"Ronin.train_multi_model","text":"train_multi_model(config::ModelConfig)\n\nAll-in-one function to take in a set of radar data, calculate input features, and train a chain of random forest models  for meteorological/non-meteorological gate identification. \n\n#Required arguments \n\nconfig::ModelConfig\n\nStruct containing configuration info for model training \n\n\n\n\n\n","category":"function"},{"location":"api.html#Ronin.composite_prediction","page":"Reference","title":"Ronin.composite_prediction","text":"composite_prediction(config::ModelConfig; write_features_out::Bool=false, feature_outfile::String=\"placeholder.h5\", return_probs::Bool=false)\n\nPasses feature data through a model or series of models and returns model classifications. Applies configuration such as  masking and basic QC (high PGG/low NCP) specified by config\n\nOptional keyword arguments\n\nwrite_predictions_out::Bool = false \n\nIf true, will write the predictions to disk \n\nprediction_outfile::String = \"model_predictions.h5\"\n\nLocation to write predictions to on disk\n\nreturn_probs::Bool = false \n\nIf set to true, will return probability of meteorological gate for all gates. More detail below. \n\n\nQC_mode::Bool = false \n\nIf set to true, the function will instead be used to apply quality control to a (set of) scan(s)\n\nReturns\n\npredictions::Vector{Bool} Model classifications for gates that passed basic quality control thresholds \nvalues::BitVector Verification gates correspondant to predictions \ninit_idxers::Vector{Vector{Float64}} Information about where original radar data did/did not meet basic quality control thresholds.                                        Each vector contains a flattened vector describing whether or not a given gate was predicted on. \ntotal_met_probs::Vector{Float64}If kewyword argument returnprobs is set to true, then `totalmet_probs` will be returned. Each entry                                    into this vector corresponds to the gate represented by predictions and values, and denotes the fraction of                                    trees in the random forest that classified the gate as meteorological.\nAll values returned will be only those that passed quality control checks in the first pass of the model    minimum NCP / PGG thresholds. In order to reconstruct a scan, user would need to use the values in the returned indexers. \n\n\n\n\n\n","category":"function"},{"location":"api.html#Ronin.multipass_uncertain","page":"Reference","title":"Ronin.multipass_uncertain","text":"PRETTY MUCH DEPRECATED WITH VERSIONS OF RONIN CODE NOVEMBER 2024 and ONWARD \n\nmultipass_uncertain(base_config::ModelConfig, low_threshold::Float64, high_threshold::Float64; \nlow_model_path::String = \"low_config_model.jld2\", skip_training_base=false)\n\nFunction that takes in a set of model parameters, trains a model on the entire dataset, and then isolates gates that trees in the forest have trouble agreeing upon. More specifically, will isolate gates that  have > low_threshold but < high_threshold fraction of trees in agreement that they are meteorological. It will  subsequently train a random forest model specifically on these gates, saving it to ambig_model.jld2\n\nRequired Arguments\n\nbase_config::ModelConfig Model configuration object that contains information about input data and where to write models to \nlow_threshold::Float64 Used for selecting ambiguous gates, the minimum fraction of trees that must agree for a datapoint to be considered \nhigh_threshold::Float64 Used for selecting ambiguous gates, the maximum fraction of trees that may classify a gate as meteorological for it to be considered\n\nOptional Arguments\n\nlow_model_path::String=\"low_config_model.jld2\"` Where to output the base model (trained on all gates) to\nambig_model_path::String=\"ambig_model.jld2\" Where to output model trained on difficult gates to \nskip_training_base::Bool=false If base model has already been trained, set to true to skip retraining \nmode::String = \"train\" Options are \"train\" or \"predict\". If mode == \"predict\", will not do any model training\n\nReturns\n\nWill return 3 items: A vector of predictions, a vector of verification data, and an indexer vector which can be used  to determine which gates fall between the lowthreshold and highthreshold in the basic model. The prediction vector is a combination  of classifications from the model trained on the base set and the model trained on the difficult gates. \n\n\n\n\n\n","category":"function"},{"location":"api.html#Non-user-facing","page":"Reference","title":"Non-user facing","text":"","category":"section"},{"location":"api.html#Ronin.get_task_params","page":"Reference","title":"Ronin.get_task_params","text":"Function to parse a given task list Also performs checks to ensure that the specified  tasks are able to be performed to the specified CFRad file\n\n\n\n\n\nParses input parameter file for use in outputting feature names to      HDF5 file as attributes. NOTE: Cfradial-unaware. If one of the variables is      specified incorrectly in the parameter file, will cause errors\n\n\n\n\n\n","category":"function"},{"location":"api.html#Ronin.process_single_file","page":"Reference","title":"Ronin.process_single_file","text":"Driver function that calculates a set of features from a single CFRadial file. Features are  specified in file located at argfile_path. \n\nWill return a tuple of (X, Y, indexer) where X is the features matrix,  Y, a matrix containing the verification \n\nwhere human QC determined the gate was meteorological (value of 1), or non-meteorological (value of 0), \n\nand indexer contains a vector of booleans describing which gates met basic quality control thresholds  and thus are represented in the X and Y matrixes\n\nWeight matrixes are specified in file header, or passed as explicit argument. \n\nRequired arguments\n\ncfrad::NCDataset \n\nInput NCDataset containing radar scan variables \n\nargfile_path::String \n\nPath to file contaning config/task information. \n\nOptional keyword arguments\n\nHAS_INTERACTIVE_QC::Bool = false\n\nIf the scan has already had a human apply quality control to it, set to true. Otherwise, false\n\nREMOVE_LOW_NCP::Bool = false\n\nWhether or not to ignore gates that do not meet a minimum NCP/SQI threshold. If true, these gates will be set to false in indexer, and features/verification will not be calculated for them. \n\nREMOVE_HIGH_PGG::Bool = false\n\nWhether or not to ignore gates that exceed a given Probability of Ground Gate(PGG) threshold. If true, these gates will be set to false in indexer, and features/verification will not be calculated for them. \n\nQC_variable::String = \"VG\"\n\nName of a variable in input CFRadial file that has had QC applied to it already. Used to calculate verification Y matrix. \n\nremove_variable::String = \"VV\" \n\nName of raw variable in input CFRadial file that will be used to determine where missing gates exist in the sweep.\n\nreplace_missing::Bool = false\n\nFor spatial parameters, whether or not to replace missings values with FILL_VAL\n\n\n\nReturns:\n\n-X: Array that is dimensioned (num_gates x num_features) where num_gates is the number of valid \n    (non-missing, meeting NCP/PGG thresholds) the function finds, and num_features is the \n    number of features specified in the argument file to calculate. \n\n-Y: IF HAS_INTERACTIVE_QC == true, will return Y, array containing 1 if a datapoint was retained \n    during interactive QC, and 0 otherwise. \n\n-INDEXER: Based on remove_variable as described above, contains boolean array specifiying\n            where in the scan features valid data and where does not.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Home","title":"Home","text":"Ronin (Random forest Optimized Nonmeteorological IdentificatioN) is a package that utilizes a methodology developed by Dr. Alex DesRosiers and Dr. Michael Bell to remove non-meteorological gates from Doppler radar scans by leveraging machine learning techniques. In its current form, it contains functionality to derive a set of features from input radar data, use these features to train a Random Forest classification model, and apply this model to the raw fields contained within the radar scans. It also has some model evaluation ability. The beginning of this guide will walk through a basic workflow to train a model starting from scratch.  ","category":"page"},{"location":"index.html#Single-model-Workflow-Walkthrough","page":"Home","title":"Single-model Workflow Walkthrough","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Roninflowchart)","category":"page"},{"location":"index.html#Preparing-input-data","page":"Home","title":"Preparing input data","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The first step in the process is to split our data so that some of it may be utilized for model training and the other portion for model testing. It's important to keep the two sets separate, otherwise the model may overfit. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The basic requirement here is to have a directory or directories of cfradial scans, and two directories to put training and testing files, respectively. Make sure that no other files are present in these directories. To do this, the split_training_testing! function will be used. For example, if one had two cases of radar data, located in ./CASE1/ and ./CASE2/ and wanted to split into ./TRAINING and ./TESTING, execute the command ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"split_training_testing([\"./CASE1\", \"./CASE2\"], \"./TRAINING\", \"./TESTING\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"More information about this function is contained within the docs. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Now that we have split the input files, we can proceed to calculate the features used to train and test our Random Forest model. Further details are contained within the aforementioned manuscript, but it has been shown that the parameters contained here are most effective for discriminating between meteorological/non-meteorological gates. For this, we will use the calculate_features function. Since we are calculating features to train a model at this point, we will assume that intreactive QC has already been applied to them. To get the most skillful model possible, we will want to remove \"easy\" cases from the training set, so set REMOVE_LOW_NCP=true and REMOVE_HIGH_PGG=true to ignore data not meeting minimum quality thresholds. It's also important to specify which variable contained with the input scans has already been QC'ed - in the ELDORA scans, this is VG. missing values must also be removed from the initial training set, so we'll use a raw variable VV to determine where these gates are located. With that said, one may now invoke ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"calculate_features(\"./TRAINING\", \"./config.txt\", \"TRAINING_FEATURES.h5\", true;\n                    verbose=true, REMOVE_LOW_NCP = true, REMOVE_HIGH_PGG=true,\n                    QC_variable=\"VG\", remove_variable=\"VV\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To use the config file located at ./config.txt to output the training features to TRAINING_FEATURES.h5. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For clarity's sake, for the testing features this step would be exectued again but changing the input directory and output location. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This is a somewhat computationally expensive process for large datasets >1000 scans, and so can take over 15 minutes. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Training-a-Random-Forest-Model","page":"Home","title":"Training a Random Forest Model","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Now that the somewhat arduous process of calculating input features has completed, it's time to train our model! We'll use the training set for this, which we have previously defined to be located at ./TRAINING_FEATURES.h5. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"First, in order to combat the class imbalance problem, we must calculate weights for the non-meteorological and meteorological gates. This can be achieved as follows.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"weights = Vector{Float64}(undef, 0)\nclass_weights = h5open(\"TRAINING_FEATURES.h5\") do f\n    samples = f[\"Y\"][:,:][:]\n    class_weights = Vector{Float32}(fill(0,length(samples)))\n    weight_dict = compute_balanced_class_weights(samples)\n\n    for class in keys(weight_dict) \n        class_weights[samples .== class] .= weight_dict[class]\n    end \n    return(class_weights)\nend ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Now we can train the model! ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"train_model(\"./TRAINING_FEATURES.h5\", \"TRAINED_MODEL.joblib\"; class_weights = Vector{Float32}(class_weights) , verify=true, verify_out=\"TRAINING_SET_VERIFICATION.h5\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This will train a model based off the information contained within TRAINING_FEATURES.h5, saving it for further use at ./TRAINED_MODEL.joblib. The verify keyword arguments means that, once trained, the model will be automatically applied to the training dataset and the predictions will be output, along with the ground truth/correct answers, to the h5 file at TRAINING_SET_VERIFICATION.h5.   ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Applying-the-trained-model-to-a-radar-scan","page":"Home","title":"Applying the trained model to a radar scan","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It's finally time to begin cleaning radar data! We'll use the QC_scan function to apply our model to raw moments. Let's imagine we want to clean the scan located at ./cfrad_example_scan using the model we previously trained at TRAINED_MODEL.joblib. By default, this will clean the variables with the names ZZ and VV, though this can be changed by modifying the VARIABLES_TO_QC argument. They will be added to the cfradial file with the names ZZ_QC and VV_QC, respectively, though this suffix can be changed though keyword arguments. Execute as  ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"QC_scan(\"./cfrad_example_scan\", \"./config.txt\", \"./TRAINED_MODEL.joblib\")","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Spatial-Predictors-Reference","page":"Home","title":"Spatial Predictors Reference","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A key portion of this methodology is deriving \"predictors\" from raw input radar moments. Raw moments include quantities such as Doppler velocity and reflectivity, while derived variables include things such as the standard deviation of a raw moment across a set of azimuths and ranges in a radar scan. Calculating these features allows the addition of spatial context to the classification problem even when only classifying a single gate. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Each of the spatial predictors (Currently STD, ISO, and AVG) have predefined \"windows\" that specify the area they calculate. These windows are specified as matrixes at the top of RoninFeatures.jl. They can also be user specified when using calculate_features. &nbsp;","category":"page"},{"location":"index.html#Currently-Implemented-Functions:","page":"Home","title":"Currently Implemented Functions:","text":"","category":"section"},{"location":"index.html#**STD(VAR)**","page":"Home","title":"STD(VAR)","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Calculates the standard deviation of each gate of the variable with name VAR in the given radar sweep. By default, gates that contain missing values are ignored in this calculation. Further by default ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#**ISO(VAR)**","page":"Home","title":"ISO(VAR)","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Calculates the \"isolation\" of each gate of the variable with name VAR in the given radar sweep. This calculation sums the number of adjacent gates in both range and aziumth that contain missing values. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#**AVG(VAR)**","page":"Home","title":"AVG(VAR)","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Calculates the average of each gate of the variable with name VAR in the given radar sweep. By default, gates that contain missing values are ignored in this calculation. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#**RNG/NRG**","page":"Home","title":"RNG/NRG","text":"","category":"section"},{"location":"index.html#Calculates-the-range-of-all-radar-gates-(RNG)-from-the-airborne-platform,-or-normalized-by-altitude-(NRG).","page":"Home","title":"Calculates the range of all radar gates (RNG) from the airborne platform, or normalized by altitude (NRG).","text":"","category":"section"},{"location":"index.html#**PGG**","page":"Home","title":"PGG","text":"","category":"section"},{"location":"index.html#**P**robability-of-**G**round-**G**ate-a-geometric-calculation-that-gives-the-probability-that-a-given-radar-gate-is-a-result-of-reflection-from-the-ground.","page":"Home","title":"Probability of Ground Gate - a geometric calculation that gives the probability that a given radar gate is a result of reflection from the ground.","text":"","category":"section"},{"location":"index.html#**AHT**","page":"Home","title":"AHT","text":"","category":"section"},{"location":"index.html#**A**ircraft-**H**eigh**T**-calculates-platform-height-while-factoring-in-Earth-curvature.","page":"Home","title":"Aircraft HeighT - calculates platform height while factoring in Earth curvature.","text":"","category":"section"},{"location":"index.html#**Implementing-a-new-parameter**","page":"Home","title":"Implementing a new parameter","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The code is written in such a way that it would hopefully be relatively easy for a user to add a function of their own to apply to radar data. One could go about this using the following as a guide.    ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"There are two types of functions in Ronin: Those that act on radar variables (STD, AVG) and those that operate relatively independent of them (RNG, PGG). Functions that act on variables must be defined using a 3 letter abbreviation and begin with calc_. Furthermore, the function should take 1 positional and 2 keyword arguments. The positional argument should be the variable in matrix form to operate upon. The keyword arguments should be weights and window, where both have the same dimensions. window specifies the area for the spatial parameter to take for each gate, and weights specifies how much weight to give each neighboring gate. For example, if we wanted to define a function that gave us the logartihm of a variable, we could name it LOG, with the function defined in code as","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"function calc_LOG(var::Matrix{Union{Missing, Float64}}; weights=default_weights, window=default_window)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The function should return an array of the same size as var. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Finally, add the three letter abbreviation LOG to the valid_funcs array at the top of RoninFeatures.jl. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Congratulations! You've added a new function! ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Data-Conventions/Glossary","page":"Home","title":"Data Conventions/Glossary","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Some important data convetions to make note of: ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Meteorological Data is referred to by 1 or true\nNon-Meteorological Data is referred to by 0 or false\nELDORA scan variable names: \nRaw Velocity: VV\nQC'ed Velocity (Used for ground truth): VG\nRaw Reflectivity: ZZ\nQC'ed Reflectivity (Used for ground truth): DBZ\nNormalized Coherent Power/Signal Quality Index: NCP\nNOAA TDR scan variable names: \nRaw Velocity: VEL\nQC'ed Velocity (Used for ground truth): VE\nRaw Reflectivity: DBZ\nQC'ed Reflectivity (Used for ground truth): DZ\nNormalized Coherent Power/Signal Quality Index: SQI","category":"page"}]
}
